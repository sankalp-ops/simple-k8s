name: Destroy Setup

on:
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    env:
      KUBECONFIG_FILE: ./kubeconfig-eks
      AWS_REGION: "us-east-1"
      WORK_DIR: ./Terraform
      Domain: myfibapp.click

    steps:
      # 1️⃣ Check out code
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Install Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.9.5
          
      - name: Configure AWS
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id:     ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Terraform Init
        run:   |
            terraform init -input=false
        working-directory: ${{  env.WORK_DIR  }}

      - name: Capture Terraform Outputs
        id: tfout
        run: |
          cd ${{  env.WORK_DIR  }}
          terraform output -json > tf-output.json
          echo "cluster=$(jq -r '."k8s-cluster".value' tf-output.json)"   >> $GITHUB_OUTPUT
          echo "region=$(jq -r '.aws_region.value' tf-output.json)"  >> $GITHUB_OUTPUT
          # echo "domain=$(jq -r '.aws_myapps_dns.value' tf-output.json)"     >> $GITHUB_OUTPUT

      # 5️⃣ Fetch kubeconfig for the new/existing cluster
      - name: Download kubeconfig
        run: |
          aws eks update-kubeconfig \
            --name "${{ steps.tfout.outputs.cluster }}"  \
            --region "${{ steps.tfout.outputs.region }}"  \
            --kubeconfig $KUBECONFIG_FILE

      - name: Install Helm
        uses: azure/setup-helm@v4
        with:
          version: v3.18.6
      - name: Delete Cert-Manager
        run: |
          if helm status cert-manager --namespace cert-manager --kubeconfig "$KUBECONFIG_FILE" >/dev/null 2>&1; then
            echo "Uninstalling cert-manager..."
            helm uninstall cert-manager --namespace cert-manager --kubeconfig "$KUBECONFIG_FILE"
          else
            echo "cert-manager not installed, skipping."
          fi
          
      - name: Delete External-DNS
        run: |
          if helm status external-dns --namespace external-dns --kubeconfig "$KUBECONFIG_FILE" >/dev/null 2>&1; then
              echo "Uninstalling external-dns..."
              helm uninstall external-dns --namespace external-dns --kubeconfig "$KUBECONFIG_FILE"
          else
              echo "external-dns not installed, skipping."
          fi
        
          
      - name: Delete nginx-ingress
        run: |
          if helm status ingress-nginx --namespace ingress-nginx --kubeconfig "$KUBECONFIG_FILE" >/dev/null 2>&1; then
            echo "Uninstalling ingress-nginx..."
            helm uninstall ingress-nginx --namespace ingress-nginx --kubeconfig "$KUBECONFIG_FILE"
          else
            echo "ingress-nginx not installed, skipping."
          fi

      - name: Fetch Hosted Zone ID
        id: zone
        run: |
          ZONE_ID=$(aws route53 list-hosted-zones-by-name \
            --dns-name ${{  env.Domain  }} \
            --query "HostedZones[0].Id" \
            --output text | awk -F/ '{print $3}')
          echo "zone_id=$ZONE_ID" >> "$GITHUB_OUTPUT"

      - name: Show Hosted Zone ID
        run: echo "Hosted Zone ID is ${{ steps.zone.outputs.zone_id }}"

      - name: Delete A and AAAA Records
        run: |
          ZONE_ID="${{ steps.zone.outputs.zone_id }}"

          # Fetch current A/AAAA records
          aws route53 list-resource-record-sets --hosted-zone-id "$ZONE_ID" \
            --query "ResourceRecordSets[?Type=='A' || Type=='AAAA']" --output json > records.json

          # Build a change batch for each record found
          if [ "$(jq 'length' records.json)" -gt 0 ]; then
            jq '{Changes: map({Action: "DELETE", ResourceRecordSet: .})}' records.json > change-batch.json
            cat change-batch.json
            aws route53 change-resource-record-sets --hosted-zone-id "$ZONE_ID" --change-batch file://change-batch.json
          else
            echo "No A or AAAA records found."
          fi

      - name: Delete k8s Apps
        run: kubectl delete -f ./k8s-apps -R --kubeconfig "$KUBECONFIG_FILE" --ignore-not-found

      - name: Deleteing Terraform
        working-directory: ${{  env.WORK_DIR  }}
        run: terraform destroy -auto-approve -input=false
